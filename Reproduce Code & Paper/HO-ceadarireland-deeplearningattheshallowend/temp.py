import numpy as np
import cv2
import os
import pandas as pd
import csv
import sklearn.metrics as metrics
from copy import deepcopy
import shutil
from shutil import copy


project_dir = 'D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset'
data_dir = os.path.join(project_dir, 'malimg_dataset')

train_dir = os.path.join(data_dir, 'train')
test_dir = os.path.join(data_dir, 'validation-original')
train_labels_fn = os.path.join(data_dir, 'trainLabels.csv')
val_labels_fn = os.path.join(data_dir, 'valLabels.csv')
"""********************************************* 
  Create csv file to store img ID and Class
 *********************************************"""
# folders = os.listdir(train_dir)
# with open('./trainLabels.csv', 'w', newline='') as csvf:
#     # 建立 CSV 檔寫入器
#     writer = csv.writer(csvf)
#     writer.writerow(['Id','Class'])
#     for j, f in enumerate(folders):
#         fullpath = os.path.join(train_dir, f)
#         files = os.listdir(fullpath)
#         for i in files:
#             writer.writerow([i, j+1])

# folders = os.listdir(test_dir)
# with open('./valLabels.csv', 'w', newline='') as csvf:
#     # 建立 CSV 檔寫入器
#     writer = csv.writer(csvf)
#     writer.writerow(['Id','Class'])
#     for j, f in enumerate(folders):
#         fullpath = os.path.join(test_dir, f)
#         files = os.listdir(fullpath)
#         for i in files:
#             writer.writerow([i, j+1])


"""********************************************* 
  Move all image in each folder to the same folder
 *********************************************"""
# f2 = 'D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset/malimg_dataset/validation/'
# folders = os.listdir(test_dir)
# for j, f in enumerate(folders):
#     fullpath = os.path.join(test_dir, f)
#     files = os.listdir(fullpath)
#     for i in files:
#         files_src = os.path.join(fullpath, i)
#         files_dest = os.path.join(f2, i)
#         shutil.copyfile(files_src, files_dest)   # 複製檔案


"""********************************************* 
  Resize train/val image to 256*256
 *********************************************"""
# from PIL import Image
# test_dir = os.path.join(data_dir, 'train-unresize')
# f2 = 'D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset/malimg_dataset/train/'
# files = os.listdir(test_dir)
# for j, f in enumerate(files):
#     fullpath = os.path.join(test_dir, f)
#     img = Image.open(fullpath)
#     new_img = img.resize((256, 256))
#     file_dest = os.path.join(f2, f)
#     new_img.save(file_dest)


# from PIL import Image
# test_dir = os.path.join(data_dir, 'validation-unresize')
# f2 = 'D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset/malimg_dataset/validation/'
# files = os.listdir(test_dir)
# for j, f in enumerate(files):
#     fullpath = os.path.join(test_dir, f)
#     img = Image.open(fullpath)
#     new_img = img.resize((256, 256))
#     file_dest = os.path.join(f2, f)
#     new_img.save(file_dest)


"""********************************************* 
  Resize train/val image to 10000bytes
 *********************************************"""
# test_dir = os.path.join(data_dir, 'train-unresize')
# files = os.listdir(test_dir)
# width = 1
# max_len = int(1e4)
# f2 = 'D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset/malimg_dataset/train/'
# for idx, fn in enumerate(files):
#     fn_wp = os.path.join(test_dir, fn)
#     bin_stream = np.fromfile(fn_wp, dtype='uint8')
#     bin_stream = bin_stream.reshape(bin_stream.shape[0], 1)
#     img_shrink = cv2.resize(bin_stream, (width, max_len))
#     file_dest = os.path.join(f2, fn)
#     img_shrink.tofile(file_dest)

# test_dir = os.path.join(data_dir, 'validation-unresize')
# files = os.listdir(test_dir)
# width = 1
# max_len = int(1e4)
# f2 = 'D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset/malimg_dataset/validation/'
# for idx, fn in enumerate(files):
#     fn_wp = os.path.join(test_dir, fn)
#     bin_stream = np.fromfile(fn_wp, dtype='uint8')
#     bin_stream = bin_stream.reshape(bin_stream.shape[0], 1)
#     img_shrink = cv2.resize(bin_stream, (width, max_len))
#     file_dest = os.path.join(f2, fn)
#     img_shrink.tofile(file_dest)